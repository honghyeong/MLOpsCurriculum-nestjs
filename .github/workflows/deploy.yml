name: Main Push ECR Delpoy

on: [push]

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: kciter/aws-ecr-action@v3
#         with:
#           access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           account_id: ${{ secrets.AWS_ACCOUNT_ID }}
#           repo: docker/repo
#           region: ap-northeast-2
#           tags: latest,${{ github.sha }}
#           create_repo: true
#           set_repo_policy: false
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    # environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cicd-test
          IMAGE_TAG: ${{ github.sha }}
        run: |

          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./mlopsapi
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: render-task-definition
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: nest
      #     image: ${{ steps.build-image.outputs.image }}

      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: cicd-service
      #     cluster: cicd-cluster
      #     wait-for-service-stability: true
